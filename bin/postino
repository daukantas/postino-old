#!/usr/bin/env python

import argparse

from postino import Address, postino, postino_markdown, PostinoError

def main():
    parser = argparse.ArgumentParser('Send emails..')
    parser.add_argument('to', type=Address, nargs='*',
            help='set recipient address')
    parser.add_argument('--markdown', '-m',
            action='store_true',
            help='treat input as markdown and convert it to html')
    parser.add_argument('--subject', '-s',
            help='set subject (ignored if --subject-inline is used)')
    parser.add_argument('--subject-inline', '-S',
            action='store_true',
            help='set subject to first line of input')
    parser.add_argument('--cc',
            type=Address,
            action='append',
            help='add CC recipient')
    parser.add_argument('--bcc',
            type=Address,
            action='append',
            help='add BCC recipient')
    parser.add_argument('--input', '-i',
            default='-',
            type=argparse.FileType('r'),
            help='specify input file')
    parser.add_argument('--allow-empty', '-e',
            action='store_true',
            help='allow empty body')

    args = parser.parse_args()

    text = [s.decode('utf-8') for s in args.input.readlines()]

    if args.subject_inline:
        # subject in first line
        if not text:
            raise PostinoError('Inline subject expected, but input is empty')
        subject = text[0]
        body = u'\n'.join(text[1:])
    else:
        # subject on command line or left out
        subject = args.subject
        body = u'\n'.join(text)

    if not body and not args.allow_empty:
        raise PostinoError('Body is empty')

    if args.markdown:
        postino_markdown(subject=subject,
                text=body,
                to=args.to,
                cc=args.cc,
                bcc=args.bcc)
    else:
        postino(subject=subject,
                text=body,
                to=args.to,
                cc=args.cc,
                bcc=args.bcc)


if __name__ == '__main__':
    try:
        main()
    except PostinoError as e:
        raise SystemExit(e)
    except KeyboardInterrupt:
        raise SystemExit('Aborted.')
